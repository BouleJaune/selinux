{"config":{"lang":["fr"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Comprendre SELinux et savoir modifier la politique de s\u00e9curit\u00e9","text":""},{"location":"#objectifs-pedagogiques","title":"Objectifs p\u00e9dagogiques :","text":"<ul> <li>Approfondir la compr\u00e9hension du fonctionnement de SELinux</li> <li>Ma\u00eetriser les outils de gestion et d\u2019analyse des politiques SELinux</li> <li>Savoir \u00e9crire, modifier et d\u00e9ployer des modules de politique personnalis\u00e9e</li> <li>Comprendre l\u2019usage de SELinux dans les environnements \u00e0 haute s\u00e9curit\u00e9 (MLS/MCS)</li> <li>Appliquer SELinux efficacement dans des environnements conteneuris\u00e9s</li> </ul>"},{"location":"#programme","title":"Programme :","text":""},{"location":"#introduction-a-selinux","title":"Introduction \u00e0 SELinux","text":"<ul> <li>Rappel du syst\u00e8me de droits classique Linux et m\u00e9canisme MAC</li> <li>Pr\u00e9sentation du contexte de s\u00e9curit\u00e9 : <code>user:role:type:level</code></li> <li>Modes de fonctionnement et politiques disponibles (<code>targeted</code>, <code>mls</code>, <code>strict</code>)</li> <li>\u00c9tats de fonctionnement (<code>getenforce</code>, <code>setenforce</code>, <code>sestatus</code>, <code>selinuxenabled</code>)</li> </ul>"},{"location":"#diagnostic-et-analyse-des-blocages-selinux","title":"Diagnostic et analyse des blocages SELinux","text":"<ul> <li>Lecture et compr\u00e9hension des messages AVC</li> <li>Utilisation des outils <code>ausearch</code>, <code>audit2why</code>, <code>audit2allow</code></li> <li>Pr\u00e9sentation de <code>sealert</code> et du service <code>setroubleshoot</code></li> <li>Mise en \u00e9vidence de cas pratiques de blocage et r\u00e9solution</li> </ul>"},{"location":"#gestion-avancee-de-la-politique-selinux","title":"Gestion avanc\u00e9e de la politique SELinux","text":"<ul> <li>Exploration d\u2019une politique : <code>seinfo</code>, <code>sesearch</code>, <code>apol</code></li> <li>Commandes : <code>restorecon</code>, <code>setfiles</code>, <code>fixfiles</code>, <code>chcon</code>, <code>semanage</code></li> <li>Gestion des bool\u00e9ens : <code>getsebool</code>, <code>setsebool</code></li> </ul>"},{"location":"#creation-et-modification-de-modules-de-politique-personnalisee","title":"Cr\u00e9ation et modification de modules de politique personnalis\u00e9e","text":"<ul> <li>Structure des fichiers</li> <li>Compilation et d\u00e9ploiement de modules</li> <li>\u00c9criture de r\u00e8gles personnalis\u00e9es</li> <li>Cr\u00e9ation de modules simples et modules plus complexes</li> <li>Bonnes pratiques de maintenance des modules personnalis\u00e9s</li> </ul>"},{"location":"#selinux-et-mcsmls","title":"SELinux et MCS/MLS","text":"<ul> <li>Pr\u00e9sentation de MCS (Multi Category Security) et MLS (Multi Level Security)</li> <li>Gestion des niveaux de s\u00e9curit\u00e9 et cat\u00e9gories MCS</li> <li>Cas d\u2019usage et application concr\u00e8te de l\u2019isolement via MCS/MLS</li> </ul>"},{"location":"#selinux-et-conteneurs-podman-rootless","title":"SELinux et conteneurs (Podman / rootless)","text":"<ul> <li>Fonctionnement de SELinux avec des conteneurs OCI (<code>container_t</code>, policy <code>container-selinux</code>)</li> <li>Impact des options <code>:z</code> et <code>:Z</code> sur les contextes des volumes</li> <li>Utilisation de <code>--security-opt label=...</code> pour g\u00e9rer les contextes</li> <li>Policy custom pour container (Udica)</li> <li>Cas pratiques </li> </ul>"},{"location":"TP1/","title":"Introduction \u00e0 SELinux et Analyse des blocages","text":""},{"location":"TP1/#decouverte-et-etat-de-selinux","title":"D\u00e9couverte et \u00e9tat de SELinux","text":""},{"location":"TP1/#objectifs","title":"Objectifs","text":"<ul> <li>Comprendre le fonctionnement g\u00e9n\u00e9ral de SELinux</li> <li>Identifier et interpr\u00e9ter les contextes SELinux</li> <li>Manipuler les outils de diagnostic des blocages (AVC)</li> <li>R\u00e9soudre des probl\u00e8mes classiques li\u00e9s \u00e0 la politique de s\u00e9curit\u00e9</li> </ul>"},{"location":"TP1/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>VM Fedora Server avec SELinux</li> <li>Acc\u00e8s root</li> <li>Paquets utiles install\u00e9s : <code>policycoreutils</code>, <code>policycoreutils-python-utils</code>, <code>setroubleshoot</code>, <code>audit</code>, <code>selinux-policy-devel</code> <code>setools-console</code></li> </ul>"},{"location":"TP1/#verification-de-letat-selinux","title":"V\u00e9rification de l\u2019\u00e9tat SELinux","text":"<p>Utilisez des commandes CLI pour voir l'\u00e9tat de SELinux et voir quelle elle la policy actuellement charg\u00e9e.</p> <p>Vous pouvez aussi utiliser une commande renvoyant un code de retour 1 ou 0 pour voir l'\u00e9tat de SELinux, utile dans les scripts.</p> Commandes <pre><code>getenforce\nsestatus\nselinuxenabled &amp;&amp; echo \"SELinux est activ\u00e9\"\n</code></pre>"},{"location":"TP1/#observation-des-contextes","title":"Observation des contextes","text":"<p>Lister les contextes de : fichiers, processes, ports, utilisateur...</p> Commandes <pre><code>ls -Z /\nps -eZ \nsemanage port -l\nid -Z\n</code></pre>"},{"location":"TP1/#mise-en-evidence-dun-blocage-selinux","title":"Mise en \u00e9vidence d\u2019un blocage SELinux","text":""},{"location":"TP1/#mise-en-place-dun-blocage-selinux-volontaire","title":"Mise en place d\u2019un blocage SELinux volontaire","text":"<p>Nous allons cr\u00e9er un service systemd qui ex\u00e9cute un script simple pour g\u00e9n\u00e9rer des erreurs SELinux.</p> <p>Le script:  <pre><code>echo '#! /bin/bash' &gt; ~/script.sh\necho 'echo \"Run OK\" &gt;&gt; /tmp/log.txt' &gt;&gt; ~/script.sh\nchmod +x ~/script.sh\n</code></pre></p> <p>Le service: <pre><code>cat &lt;&lt;EOF | sudo tee /etc/systemd/system/myscript.service\n[Unit]\nDescription=Test SELinux Script\n\n[Service]\nExecStart=/root/script.sh\n\n[Install]\nWantedBy=multi-user.target\nEOF\n</code></pre></p> <p>Activation du service: <pre><code>systemctl daemon-reload\nsystemctl start myscript.service\n</code></pre></p> <p>Le service devrait \u00eatre bloqu\u00e9 par SELinux.</p>"},{"location":"TP1/#analyse-des-messages-avc","title":"Analyse des messages AVC","text":""},{"location":"TP1/#lecture-brute-des-logs","title":"Lecture brute des logs","text":"<p>Retrouvez ces blocages dans les logs du syst\u00e8me de diff\u00e9rentes mani\u00e8res et identifiez la source, cible et action interdite.</p> Commandes <pre><code>less /var/log/audit/audit.log\nausearch -m AVC -ts recent\n</code></pre>"},{"location":"TP1/#reiterer-en-permissive","title":"R\u00e9it\u00e9rer en <code>Permissive</code>","text":"<p>Relancez le service en <code>Permissive</code> et observez les erreurs.</p> Commandes <pre><code>setenforce 0 # Met en permissive\nsystemctl restart myscript.service\ncat /tmp/log.txt # Observez que le script s'\u00e9x\u00e9cute bien maintenant\nausearch -m AVC -ts recent # De multiples erreurs sont visibles\n</code></pre> Les diff\u00e9rentes erreurs visibles en Permissive <p>Il y a maintenant plusieurs erreurs visibles dans les logs car le script ne s'arr\u00eate pas \u00e0 la premi\u00e8re en Permissive.</p> <p>On peut voir les diverses erreurs AVC, n\u00e9anmoins c'est peu lisible.</p>"},{"location":"TP1/#interface-plus-simple-sealert","title":"Interface plus simple : sealert","text":"<p>Utilisez SELinux pour avoir une vue plus lisible des erreurs en Permissive</p> Commandes <pre><code>sealert -a /var/log/audit/audit.log\n</code></pre>"},{"location":"TP1/#correction-du-probleme","title":"Correction du probl\u00e8me","text":"<p>Un script \u00e9x\u00e9cut\u00e9 par un service est en g\u00e9n\u00e9ral dans le dossier <code>/usr/bin</code>, utilisez cette information pour trouver quel contexte mettre \u00e0 <code>script.sh</code> et corriger le probl\u00e8me. </p> Solution <p><pre><code># Observer le contexte des fichiers /usr/bin \nls -lZ /usr/bin | awk 'NR&gt;0 { print $5}' | sort | uniq -c | sort -k1 -n -r | head \n# Le type d'un binaire est bin_t, assignons le \u00e0 myscript.sh\nchcon -t bin_t /root/myscript.sh\nsystemctl restart myscript # Fonctionne !\n</code></pre> Vous pouvez voir ce que <code>bin_t</code> peut faire avec <code>sesearch -s bin_t -A</code></p> <p><pre><code>allow bin_t bin_t:dir { getattr open search };\nallow bin_t bin_t:filesystem associate;\nallow bin_t bin_t:lnk_file { getattr read };\nallow bin_t device_t:filesystem associate;\nallow file_type fs_t:filesystem associate;\nallow file_type hugetlbfs_t:filesystem associate;\nallow file_type noxattrfs:filesystem associate;\nallow file_type tmp_t:filesystem associate;\nallow file_type tmpfs_t:filesystem associate;\n</code></pre> Cela se lit par exemple : Autorise \u00e0 <code>bin_t</code> de { getattr open search } dans les dossiers de type <code>bin_t</code> (premi\u00e8re ligne)</p>"},{"location":"TP2/","title":"Gestion de la politique SELinux","text":""},{"location":"TP2/#apache-httpd-et-restauration-des-contextes","title":"Apache HTTPD et restauration des contextes","text":""},{"location":"TP2/#objectif","title":"Objectif","text":"<p>Corriger un blocage SELinux caus\u00e9 par un mauvais contexte sur un r\u00e9pertoire personnalis\u00e9 utilis\u00e9 par Apache.</p>"},{"location":"TP2/#etapes","title":"\u00c9tapes","text":""},{"location":"TP2/#installation-dapache","title":"Installation d'Apache","text":"<p>Installez Apache et acc\u00e9der \u00e0 un petit fichier depuis un navigateur internet.</p> Solution <p>Installation d'apache et cr\u00e9ation d'un index.html <pre><code>dnf install -y httpd\nsystemctl enable --now httpd\necho \"Coucou\" &gt; /var/www/html/index.html\n</code></pre> Ouverture dans le firewall ! <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre></p>"},{"location":"TP2/#creer-un-dossier-personnalise","title":"Cr\u00e9er un dossier personnalis\u00e9","text":"<p>Mettez les fichiers du serveur web dans un dossier personnalis\u00e9 ce qui entrainera un blocage.</p> Solution <p>Cr\u00e9ation d'un dossier avec un fichier index.html</p> <pre><code>mkdir /webdata\necho \"Coucou\" &gt; /webdata/index.html\n</code></pre> <p>Modifier la configuration Apache</p> <pre><code>cp /etc/httpd/conf/httpd.conf /tmp/httpd.conf.old\nsed -i 's|/var/www/html|/webdata|g' /etc/httpd/conf/httpd.conf\nsed -i 's|IncludeOptional|#IncludeOptional|g' /etc/httpd/conf/httpd.conf\nsystemctl restart httpd\n</code></pre> <p>Acc\u00e9dez \u00e0 <code>http://{ip-serveur}</code> et notez l'erreur provoqu\u00e9e par SELinux.</p>"},{"location":"TP2/#correction","title":"Correction","text":"<p>Analysez et corrigez le probl\u00e8me de mani\u00e8re permanente avec semanage.</p> Solution <p><pre><code>ls -Zd /webdata\n</code></pre> Le contexte de <code>/webdata</code> est <code>default_t</code>, ce qui emp\u00eache surement Apache d'acc\u00e9der aux fichiers.</p> <p>Utilisons <code>sealert</code> pour voir l'erreur :</p> <p><pre><code>sealert  -a /var/log/audit/audit.log\n</code></pre> <code>sealert</code> nous dit de changer le contexte par d\u00e9faut et nous donnne une longue liste peu pertinente puis nous dit de faire un <code>restorecon</code>.</p> <p>On d\u00e9termine de mani\u00e8re plus pr\u00e9cise le bon type en regardant les types li\u00e9s \u00e0 <code>httpd</code> mais aussi plus simplement le type des fichiers par d\u00e9faut de <code>/var/www/html</code>.</p> <p><pre><code>seinfo -t | grep httpd # On peut voir des types li\u00e9s au \"content\"\nls -lZ /var/www/html/ # Le type de base est httpd_sys_content_t \n</code></pre> Correction : </p> <pre><code># On mets une regex simple pour tout les fichiers dans /webdata\nsemanage fcontext -a -t httpd_sys_content_t \"/webdata(/.*)?\"\nrestorecon -Rv /webdata\n</code></pre> <p>Rechargez la page web. L'acc\u00e8s doit maintenant \u00eatre fonctionnel.</p>"},{"location":"TP2/#utilisation-des-booleens-selinux","title":"Utilisation des bool\u00e9ens SELinux","text":""},{"location":"TP2/#objectif_1","title":"Objectif","text":"<p>Activer un bool\u00e9en SELinux pour permettre une fonctionnalit\u00e9 bloqu\u00e9e par d\u00e9faut (ex. shell restreint via SSH).</p>"},{"location":"TP2/#etapes_1","title":"\u00c9tapes","text":""},{"location":"TP2/#faire-en-sorte-quapache-se-connecte-au-reseau","title":"Faire en sorte qu'Apache se connecte au r\u00e9seau","text":"<p>Faites un script dans <code>/var/www/cgi-bin/</code> qui sera atteignable sur le serveur web, ex\u00e9cut\u00e9 par <code>httpd</code> et r\u00e9cup\u00e8re des infos sur d'autres site web du net.</p> <p>L'url sera sur http://{ip-serveur}/cgi-bin/testnet.sh, mais elle ne devrait pas fonctionner directement.</p> Solution <p>Commen\u00e7ons par remettre \u00e0 z\u00e9ro notre configuration httpd :</p> <pre><code>cp /tmp/httpd.conf.old /etc/httpd/conf/httpd.conf\n</code></pre> <p>Le script: </p> <pre><code>mkdir -p /var/www/cgi-bin\ncat &gt; /var/www/cgi-bin/testnet.sh &lt;&lt;EOF\n#!/bin/bash\necho \"Content-type: http\"\necho \"\"\ncurl -s https://channels.nixos.org\nEOF\nchmod +x /var/www/cgi-bin/testnet.sh\n</code></pre> <p>Rajoutez dans la conf httpd : </p> <pre><code>ScriptAlias /cgi-bin/ /var/www/cgi-bin/\n&lt;Directory \"/var/www/cgi-bin\"&gt;\n    AllowOverride None\n    Options +ExecCGI\n    Require all granted\n&lt;/Directory&gt;\n</code></pre> <p>Puis red\u00e9marrez <code>httpd</code> avec <code>systemctl restart httpd</code></p>"},{"location":"TP2/#correction-du-probleme-selinux","title":"Correction du probl\u00e8me SELinux","text":"<p>Observez le blocage SELinux et corrigez via un bool\u00e9en </p> Solution <p><pre><code>sealert -a /var/log/audit/audit.log\n</code></pre> <code>sealert</code> nous sugg\u00e8re pour notre erreur 3 solution avec divers scores de confiance. La premi\u00e8re nous demande si on veut que \"htppd can network connect\", ce qui est bien notre cas. La solution est sugg\u00e9r\u00e9e est d'activer un bool\u00e9en et la commande est fournie.</p> <p><pre><code>setsebool -P httpd_can_network_connect 1 # active le bool\u00e9en de mani\u00e8re permanente\n</code></pre> Le site devrait maintenant \u00eatre accessible.</p>"},{"location":"TP3/","title":"Cr\u00e9ation de module custom","text":""},{"location":"TP3/#creation-de-modules-custom","title":"Cr\u00e9ation de modules custom","text":""},{"location":"TP3/#objectif","title":"Objectif","text":"<p>Cr\u00e9er un module custom pour le service du premier TP.</p>"},{"location":"TP3/#etapes","title":"\u00c9tapes","text":""},{"location":"TP3/#restaurez-le-mauvais-contexte-du-script","title":"Restaurez le (mauvais) contexte du script","text":"<p>Le <code>chcon</code> du script est temporaire, remettez le contexte original et reg\u00e9n\u00e9rez des erreurs.</p> Solution <pre><code># On peut voir la liste des fcontext avec semanage fcontext -l \nrestorecon /root/script.sh\nll -Z /root/script.sh\nsetenforce 0 # Passage permissif pour avoir toutes les erreurs et non juste la premi\u00e8re\nsystemctl restart myscript\n</code></pre>"},{"location":"TP3/#sugestions-sealert-et-creation-de-module","title":"Sugestions <code>sealert</code> et cr\u00e9ation de module","text":"<p>Utilisez <code>sealert</code> et ses suggestions pour cr\u00e9er un module custom. </p> Solution <p>R\u00e9cup\u00e9rer les logs <code>sealert</code></p> <pre><code>journalctl | grep script.sh -A 5 | grep \"lancez sealert\" # Pour r\u00e9cup\u00e9rer pile la bonne alerte et ne pas afficher tout les logs d'auditd\nsealert -l id\n</code></pre> <p><code>sealert</code> nous donne la commande pour g\u00e9n\u00e9rer et activer le module.</p> <p><pre><code>mkdir module1 &amp;&amp; cd module1\nausearch -c \"script.sh\" --raw | audit2allow -M my-scriptsh\nsemodule -i my-scriptsh.pp \n</code></pre> On peut ouvrir le fichier <code>.te</code> pour voir le CIL utilis\u00e9.</p>"},{"location":"TP3/#analyse-plus-poussee","title":"Analyse plus pouss\u00e9e","text":"<p>Une fois le module activ\u00e9, on peut relancer le service.... pour voir qu'il y a encore des erreurs !</p> <p>En effet, un bug fait que le nom de la commande n'est pas toujours vu comme <code>script.sh</code>, mais comme <code>(cript.sh)</code>, le module est g\u00e9n\u00e9rer \u00e0 partir d'un <code>ausearch -c</code> se basant sur le nom de commande !</p> <p>Un autre <code>sealert</code> nous permet de voir une autre commande qui autorisera le nouveau blocage.</p> Nouvelle commande <pre><code>ausearch -c \"(cript.sh)\" --raw | audit2allow -M my-cript\n</code></pre> <p>En comparant les <code>.te</code> on remarque que les permissions accord\u00e9es au type ne sont pas les m\u00eames. On pourrait simplement activer ce module, mais c'est un peu redondant et peu propre.</p> <p>Trouvez une autre mani\u00e8re pour g\u00e9n\u00e9rer un seul module, enlevez le pr\u00e9c\u00e9dent et activez le nouveau.</p> Tips <ul> <li><code>semodule -l</code> et <code>semodule -r</code> sont utiles pour trouver et supprimer des modules.</li> <li>Vous pouvez soit utiliser une mani\u00e8re plus efficace d'utiliser <code>ausearch</code>, soit \u00e9crire directement le <code>.te</code> n\u00e9cessaire puis compiler.</li> </ul> Solution <p>Avec <code>ausearch</code>:</p> <p>On filtre d'une mani\u00e8re plus pr\u00e9cise, notamment avec le <code>pid</code> du process <code>script.sh</code> : </p> <pre><code>ausearch -p 4569 | audit2allow -M myscriptfull\n</code></pre> <p>En \u00e9ditant les <code>.te</code>:</p> <p>On remarque que dans le premier <code>.te</code> il manquait la permission <code>execute</code>, on le rajoute dans le <code>require</code> et le <code>allow</code> puis on compile.</p> <pre><code>checkmodule -M -m -o myscriptfull.mod myscriptfull.te\nsemodule_package -o myscriptfull.pp -m myscriptfull.mod\n</code></pre> <p>Une fois une des deux m\u00e9thodes faites on peut activer le nouveau module unique :</p> <pre><code>semodule -i myscriptfull.pp\n</code></pre> <p>Important: ce module donne les droits au type <code>admin_home_t</code> entier ! Il vaut mieux dans un premier temps placer les choses o\u00f9 il faut, cela r\u00e9duit les besoins de customisation de SELinux et est plus pratique pour des raisons de standardisations.</p> <p>Le FSHS (File System Hierarchy Standard) dit qu'un script d'administration local devrait \u00eatre plac\u00e9 dans <code>/usr/local/bin</code>, qui est un dossier de type <code>bin_t</code> fonctionnant.  </p> <p>Une autre solution est de directement cr\u00e9er des types customs pour notre service.</p>"},{"location":"TP3/#creation-dun-nouveau-type-et-dun-module-custom","title":"Cr\u00e9ation d'un nouveau type et d'un module custom","text":"<p>Nous allons utiliser <code>sepolicy generate</code> pour g\u00e9n\u00e9rer un template de policy avec un nouveau type pour notre script.</p> <p>/!\\ Pensez \u00e0 supprimer vos modules pr\u00e9c\u00e9dents /!\\</p> <p>Paquets n\u00e9cessaires:</p> <pre><code>dnf install rpmbuild sepolicy\n</code></pre> <p>G\u00e9n\u00e9rez avec <code>sepolicy generate</code> un template de module pour <code>/root/script.sh</code> de type \"Standard Init Daemon\".</p> Commandes <pre><code>mkdir new_pol &amp;&amp; cd new_pol\nsepolicy generate --init /root/script.sh -n script\n./script.sh # Le nom est un peu mal choisi, \n# mais ce script.sh est un nouveau fichier g\u00e9n\u00e9r\u00e9 par la commande\n# Il permet d'installer la nouvelle policy\n</code></pre> <p>Cela va nous g\u00e9n\u00e9rer des types customs et un module basique pour ce script. On peut voir le contexte pour le fichier dans le <code>.fc</code> (File Context). Il doit \u00eatre de type <code>script_exec_t</code>.</p> <p>Il nous faut l'appliquer avec <code>semanage fcontext -a -t script_exec_t /root/script.sh</code> et <code>restorecon /root/script.sh</code>.</p> <p>Une fois ceci fait on peut relancer le service.</p> <p>Le service fonctionne et ne retourne aucune erreur. Cela est gr\u00e2ce \u00e0 la pr\u00e9sence de la maccro <code>init_daemon_domain</code>.</p> <p>Il est important de noter que le template g\u00e9n\u00e9r\u00e9 met le type <code>script_t</code> (celui du process) en permissive par d\u00e9faut dans le <code>.te</code>.</p> <p>Il y a une transition de domaine d\u00e9finie dans le fichier <code>.if</code> permettant au process ex\u00e9cut\u00e9 par le fichier de passer de <code>script_exec_t</code> \u00e0 <code>script_t</code>.</p>"},{"location":"TP3/#ou-trouver-la-liste-des-macros-et-attributs-disponibles","title":"O\u00f9 trouver la liste des macros et attributs disponibles ?","text":"<ul> <li>Sur le serveur les sources sont disponibles dans :</li> </ul> <pre><code>/usr/share/selinux/devel/include\n</code></pre> <ul> <li>sepolicy-interface :</li> </ul> <pre><code>man sepolicy-interface\nsepolicy interface -vl | grep init_domain\n</code></pre> <ul> <li>Attributs avec <code>seinfo</code>:</li> </ul> <pre><code>seinfo -a -x\ngrep -R [attribut] /usr/share/selinux/devel/include/\n</code></pre>"},{"location":"TP4/","title":"MLS/MCS","text":""},{"location":"TP4/#multi-level-security-mls-multi-category-security-mcs","title":"Multi-Level Security (MLS) &amp; Multi-Category Security (MCS)","text":""},{"location":"TP4/#objectifs-pedagogiques","title":"Objectifs p\u00e9dagogiques","text":"<ul> <li>Comprendre les principes de MLS et MCS dans SELinux.</li> <li>Manipuler les niveaux (<code>s0</code>, <code>s1</code>, etc.) et les cat\u00e9gories (<code>c0</code>, <code>c1</code>, etc.).</li> <li>Mettre en \u0153uvre un isolement de donn\u00e9es bas\u00e9 sur les niveaux et cat\u00e9gories.</li> <li>G\u00e9rer les utilisateurs SELinux avec des plages MLS/MCS d\u00e9finies.</li> </ul>"},{"location":"TP4/#pre-requis","title":"Pr\u00e9-requis","text":"<ul> <li>SELinux activ\u00e9 en mode <code>enforcing</code>.</li> <li>Politique <code>mls</code> ou <code>targeted</code> avec MCS (selon la distribution).</li> <li>Utiliser une machine Fedora ou RHEL avec le support de MLS/MCS (ex. : <code>mls</code> activ\u00e9 via <code>/etc/selinux/config</code>).</li> <li>Avoir le paquet <code>policycoreutils</code>, <code>mcstrans</code>, <code>setools-console</code> install\u00e9.</li> </ul>"},{"location":"TP4/#creation-dun-environnement-controle","title":"Cr\u00e9ation d\u2019un environnement contr\u00f4l\u00e9","text":""},{"location":"TP4/#creation-des-utilisateurs-linux-et-selinux","title":"Cr\u00e9ation des utilisateurs Linux et SELinux","text":"<p>Cr\u00e9ez 2 utilisateurs linux <code>alice</code> et <code>bob</code>, puis avec <code>semanage</code> cr\u00e9ez 2 utilisateurs SELinux <code>mcs_alice</code> et <code>mcs_bob</code> ayant le r\u00f4le <code>staff_r</code> et respectivement les ranges <code>s0:c0</code> et <code>s0:c1</code>.</p> <p>Enfin assignez <code>bob</code> et <code>alice</code> \u00e0 leur user SELinux.</p> Commandes <pre><code>useradd alice\nuseradd bob\n</code></pre> <p>D\u00e9finir une plage MLS/MCS restreinte \u00e0 chaque utilisateur :</p> <pre><code>semanage user -a -R \"staff_r\" -r \"s0:c0\" mcs_alice\nsemanage user -a -R \"staff_r\" -r \"s0:c1\" mcs_bob\nsemanage login -a -s mcs_alice alice\nsemanage login -a -s mcs_bob bob\n</code></pre> <p>V\u00e9rification :</p> <pre><code>semanage login -l\n</code></pre>"},{"location":"TP4/#manipulation-de-fichiers-avec-contexte-mcs","title":"Manipulation de fichiers avec contexte MCS","text":"<p>Prenez ces deux fichiers et assignez leur la bonne range vis \u00e0 vis du user.</p> <pre><code>echo \"ok\" &gt; /tmp/data_alice \necho \"ok\" &gt; /tmp/data_bob\n</code></pre> Commandes <pre><code>chcon -t user_home_t -l s0:c0 /tmp/data_alice\nchcon -t user_home_t -l s0:c1 /tmp/data_bob\n</code></pre>"},{"location":"TP4/#test-de-lecture","title":"Test de lecture","text":"<p>Connectez-vous en tant que <code>alice</code> ou <code>bob</code>, testez l'acc\u00e8s \u00e0 chaque fichier et observez ce qu'il se passe.</p> Commandes <p>On se connecte sur le user <code>alice</code>:</p> <pre><code>su - alice\ncat /tmp/data_alice\ncat /tmp/data_bob\n</code></pre> <p>Rien ne semble bloqu\u00e9 ! En effet, via <code>su -</code> le contexte de l'utilisateur n'est pas chang\u00e9, il faut se connecter via ssh directement sur le user. On peut v\u00e9rifier le contexte actuel du shell avec <code>id -Z</code>.</p> <pre><code>passwd alice\n# sur un autre terminal\nssh alice@server\nid -Z\ncat /tmp/data_bob\n</code></pre> <p>Cela ne bloque pas non plus !</p>"},{"location":"TP4/#attribut-mcs_constrained_type","title":"Attribut <code>mcs_constrained_type</code>","text":"<p>Par d\u00e9faut MCS est activ\u00e9 sur targeted, mais depuis quelques versions de RHEL les cat\u00e9gories ne sont contraignantes que si l'attribut <code>mcs_constrained_type</code> est rattach\u00e9 au type.</p> <p>On peut lister les types rattach\u00e9s \u00e0 cet attribut avec : <code>seinfo -a mcs_constrained_type -x</code>:</p> <pre><code>Type Attributes: 1\n   attribute mcs_constrained_type;\n        container_device_plugin_init_t\n        container_device_plugin_t\n        container_device_t\n        container_engine_t\n        container_init_t\n        container_kvm_t\n        container_logreader_t\n        container_logwriter_t\n        container_t\n        container_userns_t\n        netlabel_peer_t\n        openshift_app_t\n        openshift_t\n        sandbox_min_t\n        sandbox_net_t\n        sandbox_web_t\n        sandbox_x_t\n        svirt_kvm_net_t\n        svirt_qemu_net_t\n        svirt_t\n        svirt_tcg_t\n</code></pre> <p>On voit que MCS est principalement utilis\u00e9 par les containers, virtualisation, kubernetes et du sandboxing.</p> <p>Il nous faut donc rajouter cet attribut \u00e0 notre type. Le type de nos utilisateurs ici est <code>staff_t</code>.</p> <p>On peut cr\u00e9er un module avec un fichier <code>.te</code> puis le compiler pour cela.</p> Ajout de l'attribut au type <code>staff_t</code> <p><code>mystaff.te</code>: <pre><code>policy_module(mystaff, 1.0)\ngen_require(`\n    type staff_t;\n    attribute mcs_constrained_type;\n')\n\ntypeattribute staff_t mcs_constrained_type;\n</code></pre> Compilation et activation: <pre><code>make -f /usr/share/selinux/devel/Makefile\nsemodule -i mystaff.pp\n</code></pre></p> <p>Maintenant les users ayant le type <code>staff_t</code> donc le role <code>staff_r</code> seront contraints par les cat\u00e9gories MCS. Testez apr\u00e8s relogin.</p> Tips <p>Vous pouvez temporairement changer votre context, notamment pour baisser en permissions, avec :</p> <pre><code>sudo runcon -l s0:c0 -- bash\n</code></pre>"},{"location":"TP4/#plages-mls","title":"Plages MLS","text":""},{"location":"TP4/#activation-de-la-policy-mls","title":"Activation de la policy MLS","text":"<p>Nous allons maintenant installer et activer la policy MLS:</p> <pre><code>dnf install selinux-policy-mls\n</code></pre> <p>Il faut faire un relabel de tout le syst\u00e8me au boot pour activer SELinux. Changez le fichier de config SELinux pour passer en MLS et en Permissive.</p> <p>Puis cr\u00e9ez un fichier pour trigger le relabel au bot : <pre><code>touch /.autorelabel\n</code></pre></p> <p>Red\u00e9marrez et v\u00e9rifier que vous \u00eates bien en MLS / Permissive apr\u00e8s.</p>"},{"location":"TP4/#assignation-dune-plage-mls","title":"Assignation d'une plage MLS","text":"<p>Changer de policy nous a enlev\u00e9 nos configurations custom. Recr\u00e9ez l'user SELinux d'<code>alice</code> puis assignez lui une plage de niveaux MLS <code>s0-s3</code>.</p> <p>Les plages MLS se d\u00e9finissent avec des <code>-</code> et les cat\u00e9gories des <code>.</code>, on peut aussi lister les cat\u00e9gories avec <code>,</code>.</p> Commandes <pre><code>semanage user -m -R \"staff_r\" -r \"s0-s3:c0.c3,c8\" mcs_alice\nsemanage login -a -s mcs_alice alice\n</code></pre> <p>Cr\u00e9ez un fichier avec un niveau sup\u00e9rieur :</p> <pre><code>chcon -t user_home_t -l s5 /tmp/data_topsecret\n</code></pre> <p>Testez l\u2019acc\u00e8s avec <code>alice</code>. Essayez de changer de niveau avec <code>runcon</code> et d'\u00e9crire dans un fichier ayant un niveau inf\u00e9rieur.</p>"},{"location":"TP4/#nettoyage","title":"Nettoyage","text":"<pre><code>userdel -r alice\nuserdel -r bob\nsemanage login -d alice\nsemanage login -d bob\nsemanage user -d mcs_alice\nsemanage user -d mcs_bob\nrm -f /tmp/data_alice /tmp/data_bob /tmp/data_topsecret\n</code></pre> <p>Repassez en <code>targeted</code> avec un <code>/.autorelabel</code> et nettoyez encore.</p>"},{"location":"TP5/","title":"SELinux et conteneurs","text":""},{"location":"TP5/#conteneurs-podman","title":"Conteneurs Podman","text":"<ul> <li>Comprendre comment SELinux isole les conteneurs.</li> <li>Manipuler les options <code>:z</code>, <code>:Z</code>, <code>--security-opt</code> dans Podman.</li> <li>Observer les contextes des processus et volumes dans l\u2019environnement utilisateur.</li> <li>Exp\u00e9rimenter avec des politiques personnalis\u00e9es (Udica).</li> </ul>"},{"location":"TP5/#pre-requis","title":"Pr\u00e9-requis","text":"<ul> <li>Fedora ou RHEL avec Podman et udica install\u00e9s (<code>dnf install podman udica -y</code>)</li> <li>SELinux activ\u00e9 en <code>targeted</code></li> </ul>"},{"location":"TP5/#lancement-dun-conteneur-de-base","title":"Lancement d\u2019un conteneur de base","text":"<p>Cr\u00e9ez un utilisateur d\u00e9di\u00e9 \u00e0 podman et connectez vous dessus.</p> Commandes <pre><code>useradd -m podtest\npasswd podtest\nsu - podtest\n</code></pre> <p>Lancez un conteneur nginx nomm\u00e9 <code>tp-web</code> sur le port <code>8080</code> et observez son contexte.</p> Commandes <pre><code>podman run -d --name tp-web -p 8080:80 docker.io/library/nginx\nfirewall-cmd --add-port=8080/tcp \n</code></pre> <pre><code>ps -efZ | grep nginx\n</code></pre>"},{"location":"TP5/#montage-dun-volume-sans-option-de-label","title":"Montage d\u2019un volume sans option de label","text":"<ul> <li>Cr\u00e9ez un r\u00e9pertoire local et copiez-y un <code>index.html</code></li> <li>Montez ce r\u00e9pertoire dans un nouveau conteneur nginx dans <code>/usr/share/nginx/html</code>.</li> </ul> Commandes <pre><code>mkdir nginx &amp;&amp; echo \"ok\" &gt; ./nginx/index.html\npodman stop tp-web &amp;&amp; podman rm tp-web\npodman run -d -name tp-web -p 8080:80 -v ./nginx:/usr/share/nginx/html nginx\n</code></pre> <ul> <li> <p>Testez l'acc\u00e8s au serveur web</p> </li> <li> <p>L\u2019acc\u00e8s fonctionne-t-il ? Si non, pourquoi ?</p> </li> </ul>"},{"location":"TP5/#resolution-avec-les-labels-de-volumes","title":"R\u00e9solution avec les labels de volumes","text":"<p>Utilisez l'option <code>:z</code> ou <code>:Z</code> pour r\u00e9soudre le probl\u00e8me, observez les diff\u00e9rences entre les deux options.</p> Commandes <p>Relancez le conteneur avec l\u2019option <code>:z</code> :</p> <pre><code>podman run -d --name tp-web -p 8080:80 -v ./nginx:/usr/share/nginx/html:z nginx\n</code></pre> <p>Observez les contextes du r\u00e9pertoire :</p> <p><pre><code>ls -Z\n</code></pre> R\u00e9it\u00e9rez avec <code>:Z</code>. Cette fois ci le volume a les cat\u00e9gories du conteneur en plus.</p>"},{"location":"TP5/#creation-dune-politique-personnalisee-avec-udica","title":"Cr\u00e9ation d\u2019une politique personnalis\u00e9e avec Udica","text":"<p>G\u00e9n\u00e9rez un JSON d\u00e9crivant le conteneur et l'envoyez dans <code>udica</code>. Une fois ceci fait, activez le module.</p> Commandes <pre><code>podman inspect tp-web &gt; container.json\nudica -j container.json tp-web # en root\n</code></pre> <p>Installer le module g\u00e9n\u00e9r\u00e9 avec la commande fournie:</p> <pre><code>semodule -i tp-web.cil /usr/share/udica/templates/{base_container.cil,net_container.cil}\n</code></pre> <p>Relancer le conteneur avec le nouveau label.</p> <pre><code>podman run -d --name tp-web \\\n  --security-opt label=type:tp-web.process \\\n  -v ~/nginx_data:/usr/share/nginx/html \\\n  -p 8080:80 nginx\n</code></pre> <p>V\u00e9rifier que tout fonctionne et observez les contextes des fichiers mont\u00e9s et du container.</p> <pre><code>ll -Z nginx\nps -eZ | grep nginx\n</code></pre> <p>Le dossier nginx n'a pas son contexte modifi\u00e9 sans l'option <code>:Z</code>/<code>:z</code> mais fonctionne quand m\u00eame, car la permission a \u00e9t\u00e9 rajout\u00e9e via la policy d'udica.</p>"},{"location":"cheatsheet/","title":"SELinux cheatsheet","text":""},{"location":"cheatsheet/#etat-de-selinux","title":"\u00c9tat de SELinux","text":"<p>Voir l'\u00e9tat de SELinux :</p> <pre><code>getenforce\nsestatus\ncat /etc/selinux/config\n</code></pre>"},{"location":"cheatsheet/#contextes","title":"Contextes","text":"<p>Voir les contextes de diff\u00e9rents objets : </p> <pre><code>netstat -Z\nid -Z\nps -Z\nls -Z\n</code></pre> <p>Changer de contexte :</p> <pre><code>chcon contexte fichier # Change un contexte\nsemanage fcontext # R\u00e8gles de contextes en dur (regex possible) \nrestorecon # Remet le contexte par d\u00e9faut selon les r\u00e8gles\n</code></pre>"},{"location":"cheatsheet/#logs","title":"Logs","text":"<p>Pr\u00e9sents dans <code>/var/log/messages</code>/<code>journalctl</code>.</p> <p>Si <code>auditd</code> actif, alors aussi dans <code>/var/log/audit/audit.log</code>.</p> <p>Le paquet <code>setroubleshoot</code> fourni des outils pour analyser les logs, notamment <code>sealert</code>.</p> <p>Les alertes sont des \"AVC denials\" (access vector cache).</p> <ul> <li>Filtre les events auditd par type de message AVC</li> </ul> <pre><code>ausearch -m AVC \n</code></pre> <ul> <li>Donne plus de d\u00e9tails et des suggestions de r\u00e9solutions sur les erreurs</li> </ul> <pre><code>sealert -a /var/log/audit/audit.log \nsealert -l \"ID_ALERTE\"\n</code></pre> <ul> <li>Donne le m\u00eame type de logs que sealert et aussi la commande pour pour afficher cette alerte avec sealert ( | grep sealert)</li> </ul> <pre><code>journalctl -u setroubleshootd \nsystemctl status setroubleshootd \n</code></pre>"},{"location":"cheatsheet/#resolutions","title":"R\u00e9solutions","text":"<p>Dans un premier temps observer la pertinence des suggestions de r\u00e9solution <code>sealert</code>.</p>"},{"location":"cheatsheet/#fshs","title":"FSHS","text":"<p>Bien penser son application selon les standards, mettre des fichiers binaires dans le dossier binaire, les confs dans <code>/etc</code> etc ...</p> <p>Spec du FSHS (file system hierarchy standard) d\u00e9crivant les conventions et la structure de l'arborescence des fichiers Linux: FHS</p>"},{"location":"cheatsheet/#contextes_1","title":"Contextes","text":"<p>S'inspirer des contextes par d\u00e9faut d'une application pour les mettre sur notre configuration non-standard (ex: contexte du dossier par d\u00e9faut du contenu apache)</p>"},{"location":"cheatsheet/#booleens","title":"Bool\u00e9ens","text":"<p>Les bool\u00e9ens sont des r\u00e8gles activables/d\u00e9sactivables concernant des configurations assez courantes de services.</p> <p>On peut les afficher et voir si ce que l'on veut pour notre application existe.</p> <pre><code>getsebool -a | grep process\nsetsebool boolean 0 ou 1\n</code></pre> <p>Afficher ce que font les bool\u00e9ens:</p> <pre><code>sepolicy booleans -a\n</code></pre>"},{"location":"cheatsheet/#audit2allow","title":"| audit2allow","text":"<p>On peut g\u00e9n\u00e9rer des r\u00e8gles directement \u00e0 partir des logs d'alertes en pipant dans <code>audit2allow</code>.</p> <pre><code>ausearch -m AVC -p PID | audit2allow -M monmodule_local\nsemodule -i monmodule_local.pp\n</code></pre> <p>C'est une bonne id\u00e9e de diff\u00e9rencier nos modules customs notamment en rajoutant <code>_local</code> dans leur nom.</p> <p>Point d'attention sur le fait de bien filtrer les bonnes alertes avec <code>ausarch</code>. On peut filtre par <code>pid</code>, <code>ppid</code>, nom de commande etc ...</p> <p>Il faut penser \u00e0 v\u00e9rifier ce que le module fait en lisant notamment le <code>.te</code> pour voir si c'est pertinent.</p>"},{"location":"cheatsheet/#generation-de-templates-de-modules","title":"G\u00e9n\u00e9ration de templates de modules","text":"<p>On peut g\u00e9n\u00e9rer des templates de modules avec <code>sepolicy generate</code>.</p> <p>Il y a plusieurs types de templates, fournissant une structure de base pour notre module.</p> <p>Cela va notamment nous g\u00e9n\u00e9rer des types customs pour notre application.</p> <p>G\u00e9n\u00e8re un template de type \"Standard Init Daemon\": <pre><code>sepolicy generate --init /root/script.sh -n script\n</code></pre></p> <p>Voir <code>man sepolicy generate</code> pour une description des diff\u00e9rents templates.</p> <p>Par d\u00e9faut le module sera en permissive dans le <code>.te</code> !</p>"},{"location":"cheatsheet/#language","title":"Language","text":""},{"location":"cheatsheet/#fichiers","title":"Fichiers","text":"<ul> <li> <p><code>.te</code> contient les r\u00e8gles SELinux</p> </li> <li> <p><code>.if</code> d\u00e9finit des interfaces et macros sp\u00e9cifiques pour pouvoir les r\u00e9utiliser, et notamment des transitions de domaines fichier<code>=&gt;</code>process</p> </li> <li> <p><code>.fc</code> d\u00e9fini des contextes par d\u00e9faut pour des fichiers</p> </li> </ul>"},{"location":"cheatsheet/#macros-et-attributs","title":"Macros et attributs","text":"<p>Les macros et attributs permettent de donner des droits de mani\u00e8res factoris\u00e9es.</p> <p>Une macro est comme une fonction dans un autre langage, permettant d'appliquer diff\u00e9rentes choses sur les \u00e9l\u00e9ments en entr\u00e9e de la macro.</p> <p>Un attribut repr\u00e9sente un groupe de types, on peut assigner un type \u00e0 un attribut pour y rattacher les permissions de l'attribut.</p> <p>Les sources des attributs et macros sont visibles dans le dossier <code>/usr/share/selinux/devel/include</code>.</p> <p>On peut aussi avoir des exemples sur : refPolicy</p> <ul> <li>Liste des attributs: </li> </ul> <pre><code>seinfo -a -x\n</code></pre> <ul> <li>Liste des macros avec explication :</li> </ul> <p><pre><code>sepolicy interface -vl\n</code></pre> Cela ne liste pas toutes les macros possibles</p>"},{"location":"cheatsheet/#structure-te","title":"Structure <code>.te</code>","text":"<ul> <li>Ent\u00eate</li> </ul> <pre><code>module monservice 1.0;\n</code></pre> <p>Une macro est aussi disponible : </p> <pre><code>policy_module(monservice, 1.0)\n</code></pre> <p>La macro va notamment prendre en require tout les class de permissions.</p> <ul> <li><code>require</code></li> </ul> <p>La keyword <code>require</code> permet de r\u00e9cup\u00e9rer des variables existantes \u00e0 utiliser dans le reste du fichier.</p> <pre><code>require {\n    type       unconfined_t;\n    type       var_log_t;\n    class      file { read write open getattr };\n}\n</code></pre> <p>Il existe aussi une macro <code>gen_require()</code></p>"},{"location":"cheatsheet/#declaration-de-types-attributs","title":"D\u00e9claration de types &amp; attributs","text":"<p>On peut d\u00e9clarer des nouveaux types, attributs et typeattribute (liens entre un type et un attribut.</p> <pre><code>type           montype;\nattribute           monattr;\ntypeattribute  montype, monattr;\n</code></pre>"},{"location":"cheatsheet/#regles","title":"R\u00e8gles","text":"<p>Une r\u00e8gle est de la forme : </p> <pre><code>regle source_type target_type : class perms;\n</code></pre> <p>Les types de r\u00e8gles possibles sont : </p> <ul> <li> <p><code>allow</code>: autorise l'action</p> </li> <li> <p><code>dontaudit</code>: ne log pas l'action (en cas de refus attendu)</p> </li> <li> <p><code>auditallow</code> : log l'action m\u00eame si autoris\u00e9 (n'<code>allow</code> pas)</p> </li> </ul> <p>Exemples:</p> <pre><code>allow monapp_t var_log_t:file { read write open getattr };\ndontaudit monapp_t etc_t:dir { search };\n</code></pre> <p>\u00c0 la place du type on peut mettre un attribut.</p>"},{"location":"cheatsheet/#constrain","title":"Constrain","text":"<p>On peut rajouter des restrictions avec le keyword <code>constrain</code>:</p> <pre><code>constrain class perms expression_logique\n</code></pre> <p>Exemple tir\u00e9 de refPolicy:</p> <pre><code>constrain socket_class_set { create relabelto relabelfrom }\n(\n    u1 == u2\n    or t1 == can_change_object_identity\n);\n</code></pre> <p>On peut faire des expressions logiques pour mieux cerner ces contraintes.</p> <p>Ici <code>u1</code> repr\u00e9sente l'user source et <code>u2</code> l'user target. <code>t1</code> le type source.</p> <p>On voit ici que la contrainte s'applique \u00e0 un attribut repr\u00e9sentant les classes de socket.</p>"},{"location":"cheatsheet/#classes-dobjets-et-permissions","title":"Classes d'objets et permissions","text":"<p>On peut d\u00e9finir des nouvelles classes et permissions mais totalement hors scope.</p>"},{"location":"cheatsheet/#classes-de-fichiers","title":"Classes de fichiers","text":"<pre><code>filesystem, dir, file, lnk_file, fifo_file\n</code></pre>"},{"location":"cheatsheet/#classes-dobjets-reseau","title":"Classes d'objets r\u00e9seau","text":"<pre><code>socket, tcp_socket, udp_socket, rawip_socket, unix_stream_socket, netif\n</code></pre>"},{"location":"cheatsheet/#classe-de-process","title":"Classe de process","text":"<p>Simplement .... <code>process</code></p>"},{"location":"cheatsheet/#permissions","title":"Permissions","text":""},{"location":"cheatsheet/#permissions-sur-fichiers","title":"Permissions sur fichiers","text":"<pre><code>append, create, execute, getattr, ioctl [syscall I/O], link, read, rename, write\n</code></pre>"},{"location":"cheatsheet/#permissions-sur-les-sockets","title":"Permissions sur les sockets","text":"<pre><code>accept, append, bind, connect, create, ioctl, read, write\n</code></pre>"},{"location":"cheatsheet/#compilation","title":"Compilation","text":"<pre><code>checkmodule    -M -m -o monservice.mod monservice.te\nsemodule_package -o monservice.pp -m monservice.mod\nsemodule  -i monservice.pp\n</code></pre>"}]}